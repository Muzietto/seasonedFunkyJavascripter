(function(ts){
/* a few implementations from the Seasoned Schemer
*/

// chapter 11
ts.add(new YAHOO.tool.TestCase({
	name : "TestScramble",
	testScramble : function() {
		var input = ArrayToList([1,1,2,2,3,2])
		Assert.isTrue(eqlist(ArrayToList([1,1,1,2,2,3]),scramble(input)))
	}
}));

// chapter 13
ts.add(new YAHOO.tool.TestCase({
	name : "TestIntersectallUsingLetrec",
	testIntersectallUsingLetrec : function() {
		Assert.isTrue(eqlist(EMPTY,intersectallUsingLetrec(EMPTY)),'empty set')  // added after reading Seasoned Schemer, page 38
		var input = ArrayToList([['a','b','c'],['c','a','d','e'],['e','f','g','h','a','b']]);		
		Assert.isTrue(eqlist(ArrayToList(['a']),intersectallUsingLetrec(input)),'input')
		var input2 = ArrayToList([[6,'pears','and'],[3,'peaches','and',6,'peppers'],[8,'pears','and',6,'plums'],['and',6,'prunes','with','some','apples']]);		
		Assert.isTrue(eqlist(ArrayToList([6,'and']),intersectallUsingLetrec(input2)),'input2')
	}
}));

// chapter 14
ts.add(new YAHOO.tool.TestCase({
	name : "TestLeftmostFirst",
	testLeftmostFirst : function() {
//		var input = ArrayToList([[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],[[],[],[],[],[]],[[],[]],[]],[[],1],[[],[1,2]],2,3,2])
		var input = ArrayToList([[[],1],[[],[1,2]],2,3,2])
		Assert.areEqual(1,leftmostFirstVersion(input))
	}
}));

ts.add(new YAHOO.tool.TestCase({
	name : "TestLeftmostContinuation",
	testLeftmostContinuation : function() {
//		var input = ArrayToList
		var input = ArrayToList([[[],1],[[],[1,2]],2,3,2])
		//Assert.areEqual('CCC1',leftmostXX(input))
	}
}));

ts.add(new YAHOO.tool.TestCase({
	name : "TestRember1",
	testRember1 : function() {
		var input = ArrayToList([1, [1,2,[0,1,1,[],2]],1,[2,[1,2,0,2],3,2],3,2])
		var expected = ArrayToList([1, [1,2,[0,1,1,[],2]],1,[2,[1,2,0,2],2],3,2])
		Assert.isTrue(eqlist(expected,rember1(3,input)))
	}
}));

ts.add(new YAHOO.tool.TestCase({
	name : "TestRember1Cc",
	testRember1Cc : function() {
		var input = ArrayToList([1, [1,2,[0,1,1,[],2]],1,[2,[1,2,0,2],3,2],3,2])
		var expected = ArrayToList([1, [1,2,[0,1,1,[],2]],1,[2,[1,2,0,2],2],3,2])
		//Assert.isTrue(eqlist(expected,rember1cc(3,input)))
	}
}));




}(YAHOO.SFJ.test.SFJ_TestSuite));